#!/usr/bin/env python3
import sys
import os
import subprocess
import shutil
from PyQt6.QtWidgets import (QApplication, QMainWindow, QPushButton, QVBoxLayout, 
                            QWidget, QFileDialog, QLabel, QProgressBar, QTextEdit,
                            QMessageBox)
from PyQt6.QtCore import Qt, QThread, pyqtSignal

def get_ffmpeg_path():
    """Get the path to FFmpeg executable."""
    if getattr(sys, 'frozen', False):
        # Running in a bundle
        return os.path.join(sys._MEIPASS, 'ffmpeg')
    else:
        # Running in normal Python environment
        # Try to find FFmpeg in system PATH
        ffmpeg_path = shutil.which('ffmpeg')
        if ffmpeg_path:
            return ffmpeg_path
        # Fallback to common installation paths
        common_paths = [
            '/usr/local/bin/ffmpeg',
            '/usr/bin/ffmpeg',
            '/opt/homebrew/bin/ffmpeg',
            '/opt/local/bin/ffmpeg'
        ]
        for path in common_paths:
            if os.path.exists(path):
                return path
        return 'ffmpeg'  # Last resort, let the system PATH handle it

class ConversionWorker(QThread):
    progress = pyqtSignal(str)
    finished = pyqtSignal(int, int)  # success_count, error_count
    error = pyqtSignal(str)  # New signal for critical errors

    def __init__(self, directory):
        super().__init__()
        self.directory = directory
        self.ffmpeg_path = get_ffmpeg_path()

    def transliterate(self, text):
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
        text = text.translate(str.maketrans(
            '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø',
            'abvgdeejzijklmnoprstufhzcss_y_euaABVGDEEJZIJKLMNOPRSTUFHZCSS_Y_EUA'
        ))
        return text

    def sanitize_filename(self, filename):
        # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        filename = self.transliterate(filename)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        filename = ''.join(c for c in filename if c.isalnum())
        
        # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º "untitled"
        if not filename:
            filename = "untitled"
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        filename = filename.lower()
        
        return filename

    def run(self):
        try:
            if not os.path.exists(self.directory):
                self.error.emit("–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            if not os.access(self.directory, os.W_OK):
                self.error.emit("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg
            if not os.path.exists(self.ffmpeg_path):
                self.error.emit(f"FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {self.ffmpeg_path}")
                return

            # –î–µ–ª–∞–µ–º FFmpeg –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            if os.path.exists(self.ffmpeg_path):
                os.chmod(self.ffmpeg_path, 0o755)

            success_count = 0
            error_count = 0
            
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            audio_extensions = ["mp3", "wav", "aac", "m4a", "flac", "ogg", "wma", "aiff", "alac"]
            
            for ext in audio_extensions:
                for root, _, files in os.walk(self.directory):
                    for file in files:
                        if file.lower().endswith(f'.{ext}'):
                            audiofile = os.path.join(root, file)
                            
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è WAV
                            if ext == "wav":
                                continue
                            
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                            filename = os.path.splitext(file)[0]
                            new_filename = self.sanitize_filename(filename)
                            wavfile = os.path.join(root, f"{new_filename}.wav")
                            
                            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Å—É—Ñ—Ñ–∏–∫—Å
                            counter = 1
                            while os.path.exists(wavfile):
                                if new_filename == "untitled":
                                    wavfile = os.path.join(root, f"untitled{counter}.wav")
                                else:
                                    wavfile = os.path.join(root, f"{new_filename}_{counter}.wav")
                                counter += 1
                            
                            self.progress.emit(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {audiofile}")
                            self.progress.emit(f"üìù –ù–æ–≤–æ–µ –∏–º—è: {wavfile}")
                            
                            try:
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª
                                result = subprocess.run(
                                    [self.ffmpeg_path, "-loglevel", "warning", "-y", "-i", audiofile, "-ar", "44100", wavfile],
                                    capture_output=True,
                                    text=True
                                )
                                
                                if result.returncode == 0 and os.path.getsize(wavfile) > 0:
                                    self.progress.emit(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {audiofile} ‚Üí {wavfile}")
                                    os.remove(audiofile)
                                    success_count += 1
                                else:
                                    self.progress.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {audiofile}")
                                    if os.path.exists(wavfile):
                                        os.remove(wavfile)
                                    error_count += 1
                            except Exception as e:
                                self.progress.emit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                                error_count += 1
            
            self.finished.emit(success_count, error_count)
        except Exception as e:
            self.error.emit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Audio Converter")
        self.setMinimumSize(600, 400)
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.select_button = QPushButton("–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
        self.select_button.clicked.connect(self.select_directory)
        layout.addWidget(self.select_button)
        
        # –ú–µ—Ç–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
        self.directory_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        layout.addWidget(self.directory_label)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.convert_button = QPushButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.convert_button.clicked.connect(self.start_conversion)
        self.convert_button.setEnabled(False)
        layout.addWidget(self.convert_button)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_text = QTextEdit()
        self.progress_text.setReadOnly(True)
        layout.addWidget(self.progress_text)
        
        self.selected_directory = None
        self.worker = None

    def select_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏")
        if directory:
            if not os.access(directory, os.W_OK):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                return
            self.selected_directory = directory
            self.directory_label.setText(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
            self.convert_button.setEnabled(True)

    def start_conversion(self):
        if not self.selected_directory:
            return
        
        self.convert_button.setEnabled(False)
        self.select_button.setEnabled(False)
        self.progress_text.clear()
        
        self.worker = ConversionWorker(self.selected_directory)
        self.worker.progress.connect(self.update_progress)
        self.worker.finished.connect(self.conversion_finished)
        self.worker.error.connect(self.handle_error)
        self.worker.start()

    def update_progress(self, message):
        self.progress_text.append(message)
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
        self.progress_text.verticalScrollBar().setValue(
            self.progress_text.verticalScrollBar().maximum()
        )

    def handle_error(self, error_message):
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)
        self.convert_button.setEnabled(True)
        self.select_button.setEnabled(True)

    def conversion_finished(self, success_count, error_count):
        self.convert_button.setEnabled(True)
        self.select_button.setEnabled(True)
        
        self.progress_text.append(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {success_count}")
        if error_count > 0:
            self.progress_text.append(f"‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {error_count}")

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main() 